module ALE (
    input wire clk,
    input wire rst,
    
    input wire [215:0] window_input,
    input wire input_valid,    
   
    output reg [7:0] o_a_r,
    output reg [7:0] o_a_g,
    output reg [7:0] o_a_b,
    output reg [15:0] o_inv_a_r,
    output reg [15:0] o_inv_a_g,
    output reg [15:0] o_inv_a_b,
    output reg o_valid
);
    reg [8:0] max_pixel_x, max_pixel_y;
    reg [7:0] max_pixel;
    
    wire [7:0] Window_Blue_Min, Window_Green_Min, Window_Red_Min;
                            
    min_9 Blue_minimum(
      .in0(window_input[7:0]),
      .in1(window_input[31:24]),
      .in2(window_input[55:48]),
      .in3(window_input[79:72]),
      .in4(window_input[103:96]),
      .in5(window_input[127:120]),
      .in6(window_input[151:144]),
      .in7(window_input[175:168]),
      .in8(window_input[199:192]),
      .min_out(Window_Blue_Min)
    );
    
    min_9 Red_minimum(
      .in0(window_input[23:16]),
      .in1(window_input[47:40]),
      .in2(window_input[71:64]),
      .in3(window_input[95:88]),
      .in4(window_input[119:112]),
      .in5(window_input[143:136]),
      .in6(window_input[167:160]),
      .in7(window_input[191:184]),
      .in8(window_input[215:208]),
      .min_out(Window_Red_Min)
     );
     
    min_9 Green_minimum(
      .in0(window_input[15:8]),
      .in1(window_input[39:32]),
      .in2(window_input[63:56]),
      .in3(window_input[87:80]),
      .in4(window_input[111:104]),
      .in5(window_input[135:128]),
      .in6(window_input[159:152]),
      .in7(window_input[183:176]),
      .in8(window_input[207:200]),
      .min_out(Window_Green_Min)
    );
      
    // Pipeline stage 1 - Get min of each channel from 3x3 window
    reg [7:0] Stage_1_Blue_Min, Stage_1_Green_Min, Stage_1_Red_Min;
    reg Stage_1_Valid;
      
    always @(posedge clk) begin
        if (rst) begin
            Stage_1_Blue_Min <= 8'b0;
            Stage_1_Green_Min <= 8'b0;
            Stage_1_Red_Min <= 8'b0;
            Stage_1_Valid <= 1'b0;
        end
        else if (input_valid) begin
            Stage_1_Blue_Min <= Window_Blue_Min;
            Stage_1_Green_Min <= Window_Green_Min;
            Stage_1_Red_Min <= Window_Red_Min;
            Stage_1_Valid <= input_valid;
        end
        else begin
            Stage_1_Valid <= 1'b0;
        end
    end
    
    wire [7:0] dark_channel;
    reg [7:0] Stage_2_dark_channel;
    reg Stage_2_Valid;
    
    min_3 Minimum_Color_Channel(
        .in0(Stage_1_Red_Min),
        .in1(Stage_1_Green_Min),
        .in2(Stage_1_Blue_Min),
        .min_out(dark_channel)
    );
    
    always @(posedge clk) begin
        if (rst) begin
            Stage_2_dark_channel <= 8'b0;
            Stage_2_Valid <= 1'b0;
        end
        else if (Stage_1_Valid) begin
            Stage_2_dark_channel <= dark_channel;
            Stage_2_Valid <= Stage_1_Valid;
        end
        else begin
            Stage_2_Valid <= 1'b0;
        end
    end
    
    reg [7:0] max_dark_value;
    reg [7:0] Stage_3_center_r, Stage_3_center_g, Stage_3_center_b;
    reg Stage_3_Valid;
    
    wire [7:0] center_r = window_input[119:112];
    wire [7:0] center_g = window_input[111:104];
    wire [7:0] center_b = window_input[103:96];
    
    always @(posedge clk) begin
        if (rst) begin
            max_dark_value <= 8'h00;
            Stage_3_center_r <= 8'b0;
            Stage_3_center_g <= 8'b0;
            Stage_3_center_b <= 8'b0;
            Stage_3_Valid <= 1'b0;
        end
        else if (Stage_2_Valid) begin
            if (Stage_2_dark_channel > max_dark_value) begin
                max_dark_value <= Stage_2_dark_channel;
                Stage_3_center_r <= center_r;
                Stage_3_center_g <= center_g;
                Stage_3_center_b <= center_b;
            end
            Stage_3_Valid <= Stage_2_Valid;
        end
        else begin
            Stage_3_Valid <= 1'b0;
        end
    end

    always @(posedge clk) begin
        if (rst) begin
            o_a_r <= 8'h00;
            o_a_g <= 8'h00;
            o_a_b <= 8'h00;
            o_inv_a_r <= 16'h0000;
            o_inv_a_g <= 16'h0000;
            o_inv_a_b <= 16'h0000;
            o_valid <= 1'b0;
        end
        else if (Stage_3_Valid) begin
            o_a_r <= (Stage_3_center_r - (Stage_3_center_r >> 3));
            o_a_g <= (Stage_3_center_g - (Stage_3_center_g >> 3));
            o_a_b <= (Stage_3_center_b - (Stage_3_center_b >> 3));

            o_inv_a_r <= (Stage_3_center_r == 8'h00) ? 16'hFFFF : {8'h00, 8'hFF} / Stage_3_center_r;
            o_inv_a_g <= (Stage_3_center_g == 8'h00) ? 16'hFFFF : {8'h00, 8'hFF} / Stage_3_center_g;
            o_inv_a_b <= (Stage_3_center_b == 8'h00) ? 16'hFFFF : {8'h00, 8'hFF} / Stage_3_center_b;
            
            o_valid <= Stage_3_Valid;
        end
        else begin
            o_valid <= 1'b0;
        end
    end
   
endmodule
